<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18 -wKU

require 'net/http'
require 'uri'

require ENV['TM_SUPPORT_PATH'] + '/lib/ui'
require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'
require ENV['TM_SUPPORT_PATH'] + '/lib/escape'
require ENV['TM_SUPPORT_PATH'] + '/lib/progress'
require ENV['TM_SUPPORT_PATH'] + '/lib/web_preview'

require ENV['TM_BUNDLE_SUPPORT']+'/lib/sparql'


# TODO: An unsupported edge case is left: when a section contains multiple 
#   update/query markers, only the first ones are taken into account. Add support
#   for multiple markers that are chosen in :bottom_up beginning from the line where
#   an eventual include marker occurs.

# Determine line number where query text starts at
if ENV['TM_LINE_NUMBER'].nil?  
  # No line number provided, use Plan B
  # 8:6-16:7
  if ENV['TM_SELECTION'] =~ /^(\d+)/
    curr_line = Regexp.last_match[1].to_i
  else
    # Can't recover
    unless ENV['TM_SELECTED_TEXT'].nil?
      Turtle::SPARQL.raise_error(:warning,
        'Something weird happened',
        'Can\'t determine the line number of where your selection starts')
    end
  end
else
  curr_line = ENV['TM_LINE_NUMBER'].to_i
end

# Internally we start counting at zero
curr_line -= 1

$n_query_sections = 0
def open_query_section(title = nil)
  $n_query_sections += 1
  alt = ($n_query_sections % 2 == 0) ? 'even' : 'odd'
  html = &lt;&lt;-HTML
    &lt;div class="query-section #{alt}"&gt;
  HTML
  return html
end

def close_query_section()
  '&lt;/div&gt;'
end

def write_section_header(succeeded, code, msg = '')
  result = succeeded ? 'success' : 'error'
  html = &lt;&lt;-HTML
  &lt;div class="header #{result}"&gt;
    &lt;p class="code"&gt;#{code}&lt;/p&gt;
    &lt;p class="message"&gt;#{msg}&lt;/p&gt;
    &lt;div class="clear"&gt;&lt;/div&gt;
  &lt;/div&gt;
  HTML
  return html
end

def write_query_log(qry)
  qry = htmlize(qry)
  html = &lt;&lt;-HTML
  &lt;div class="query-log"&gt;
    &lt;div class="toggler"&gt;
        &lt;a href="#" title="Hold shift pressed for toggling all query logs" onclick="var collapse=function(logEl){var s=logEl.style;s.display=(s.display=='none')?'block':'none';};if(arguments[0].shiftKey){var logEls=document.querySelectorAll('.query-log .result');for(var i=0,j=logEls.length; i &lt; j; collapse(logEls.item(i++)));}else{collapse(this.parentNode.nextElementSibling)};return false;"&gt;Show/hide the executed query&lt;/a&gt;
    &lt;/div&gt;    
    &lt;div class="result" style="display:none;"&gt;&lt;pre&gt;#{qry}&lt;/pre&gt;&lt;/div&gt;
  &lt;/div&gt;
  HTML
  return html
end

def write_query_result(result)
  '&lt;div class="result"&gt;'+result+'&lt;/div&gt;'
end

def execute_query(endpoint_type, endpoint_url, qry)
  begin
    Net::HTTP.start(endpoint_url.host, endpoint_url.port || 80) do |http|
      # Remove request timeout limitation (e.g. needed some some DBpedia queries)
      http.read_timeout = nil
      if endpoint_type == :query
        url = endpoint_url.to_s + '?query='+CGI::escape(qry)
        req = Net::HTTP::Get.new(url, { 'Accept' =&gt; 'text/html, text/plain' })      
      else
        req = Net::HTTP::Post.new(endpoint_url.path, { 'Accept' =&gt; 'text/plain' })
        req.set_form_data({ 'update' =&gt; qry })
      end
      resp = http.request(req)
      log_query(endpoint_type, endpoint_url, qry, req, resp)
    end  
  rescue Errno::EHOSTUNREACH
    msg = (endpoint_url.host == 'dbpedia.org') ?
      'Relax. DBpedia seems to be down.' :
      "Looks like there is no server connected to the hostname '#{endpoint_url.host}'"
    Turtle::SPARQL.raise_error :critical, 'Host not found', msg, false
    raise Exception.new 'quiet'
  end
end

def log_query(endpoint_type, endpoint_url, qry, req, resp)  
  puts open_query_section
  puts write_section_header((resp.is_a? Net::HTTPSuccess), resp.code, 'Result of SPARQL '+endpoint_type.to_s.upcase+' query to &lt;u&gt;'+endpoint_url.to_s+'&lt;/u&gt;')
  puts write_query_log(qry)   
  if (not resp['Content-Type'].nil?) and resp['Content-Type'].index('text/html')
    puts write_query_result(resp.body)
  else
    puts write_query_result('&lt;pre style="line-height:0.8em;"&gt;'+htmlize(resp.body)+'&lt;/pre&gt;')
  end  
  puts close_query_section
end

# Create document at get section that should be executed
doc = Turtle::SPARQL::Document.new(STDIN.read)
section = doc.section_at_line(curr_line)

Turtle::SPARQL.raise_error(:info, 
  'Nothing to do', 'There is no section that spans over the given line number') if section.nil?

# Prepare preview window
n_queries = section.each_query.count
title_info = (n_queries &lt;= 1) ? '' : "(#{n_queries} queries)"
html_header("SPARQL Results #{title_info}")
puts '&lt;link rel="stylesheet" type="text/css" href="file://'+ENV['TM_BUNDLE_SUPPORT']+'/css/sparql-exec-preview.css"/&gt;'

cancel_proc = Proc.new do  
  raise Exception.new 'Execution was cancelled by the user'
  Kernel.exit
end

# Query the SPARQL service and show result to the user
begin
  TextMate.call_with_progress(
      :title =&gt; 'Executing query',
      :message =&gt; 'Please wait while the SPARQL query is being executed...',
      :indeterminate =&gt; true,
      :cancel =&gt; cancel_proc) do    
    known_eps = {}
    section.each_query do |qry|
      ep_type = Turtle::SPARQL.which_type? qry    
      # Make sure we have an appropriate endpoint
      unless known_eps.include? ep_type
        new_ep = Turtle::SPARQL.get_endpoint ep_type, section
        Turtle::SPARQL.raise_error(:warning,
          'No endpoint found',
          'No suitable endpoint marker found') if new_ep.nil?
        ep_url = URI(new_ep)
        Turtle::SPARQL.raise_error(:critical,
          'Invalid endpoint URL',
          'Only HTTP/S URLs are allowed') unless ep_url.is_a? URI::HTTP
        known_eps[ep_type] = ep_url
      end
      # Execute
      execute_query(ep_type, known_eps[ep_type], qry)
    end
  end
rescue Exception =&gt; exc
  if not ['quiet', 'Execution was cancelled by the user'].include?(exc.message)
    TextMate::UI::alert(:critical, 'Something went wrong', exc.inspect)
  end
  TextMate::exit_discard
end

html_footer()





</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>@r</string>
	<key>name</key>
	<string>Execute SPARQL Query</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>html</string>
	<key>outputLocation</key>
	<string>newWindow</string>
	<key>scope</key>
	<string>source.sparql</string>
	<key>semanticClass</key>
	<string>process.external.run.sparql.turtle</string>
	<key>uuid</key>
	<string>EF6E5E32-54FD-4AE1-B35E-CC16DFE18D13</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
