<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18 -wKU

# Prevent that input data causes trouble in shell commands
STDIN.read(nil)

require ENV['TM_BUNDLE_SUPPORT']+'/lib/turtle'
require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'

scope = ENV['TM_SCOPE']
left_scope = (ENV['TM_SCOPE_LEFT'].nil?) ? '' : ENV['TM_SCOPE_LEFT']
done = false

# Control display of list items
icons = {
  'class'              =&gt; 'Rsc_Class',
  'property'           =&gt; 'Rsc_Prop',
  'datatype'           =&gt; 'Rsc_Datatype',
  'instance'           =&gt; 'Rsc_Instance',
  'datatypeproperty'   =&gt; 'Rsc_Prop',
  'objectproperty'     =&gt; 'Rsc_Prop',
  'annotationproperty' =&gt; 'Rsc_Prop',
  'transitiveproperty' =&gt; 'Rsc_Prop',
  'symmetricproperty'  =&gt; 'Rsc_Prop',
  'functionalproperty' =&gt; 'Rsc_Prop',
  'inversefunctionalproperty' =&gt; 'Rsc_Prop',
  'equivalentproperty' =&gt; 'Rsc_Prop',
}
icons.default = 'Rsc_Unknown'
sort_dict = {
  'class'              =&gt; 'class',
  'datatype'           =&gt; 'datatype',
  'instance'           =&gt; 'instance',
  'property'           =&gt; 'property',
  'datatypeproperty'   =&gt; 'property',
  'objectproperty'     =&gt; 'property',
  'annotationproperty' =&gt; 'property',
  'transitiveproperty' =&gt; 'property',
  'symmetricproperty'  =&gt; 'property',
  'functionalproperty' =&gt; 'property',
  'inversefunctionalproperty' =&gt; 'property',
  'equivalentproperty' =&gt; 'property'
}
sort_dict.default = 'unknown'

# Autocompletion @prefix directives
if not left_scope.index('meta.spec.prefixID.turtle').nil? or 
    not left_scope.index('meta.spec.sparqlPrefix.turtle').nil?
  given_pref = Word::current_word '(\S*)'
  choices = []
  prefixes = Turtle::Prefixes.get_all()
  maxlen = prefixes.keys.max.length
  prefixes.sort.each do |pair|
    pref = pair[0]
    uri = pair[1]    
    choices.push({
      "display" =&gt; '%s %s' % [(pref+':').ljust(maxlen + 8), uri],
      "insert" =&gt; ': &lt;%s&gt;.' % [uri],
      "match" =&gt; pref,
      "image" =&gt; 'Prefix'
    })      
  end
    
  TextMate::UI.complete(choices, :case_insensitive =&gt; true, :extra_chars=&gt;'_&lt;&gt;:.@')
  TextMate::exit_show_tool_tip
  done = true
end

# Autocompletion for prefixed resource QNames
if left_scope.index('variable.other.PNAME_NS.turtle') or left_scope.index('support.variable.PN_LOCAL.turtle')
  word = Word::current_word '(\S*):(\S*)(?!(?:\.|;)\b)'
  # Chop off trailing dot (you got it ... language grammar isn't that solid)
  word = word[0..-2] if (word =~ /[.;]$/)
  word_frags = word.split(':')
  # Try to determine the IRI associated with prefix in current document
  iri = Turtle.resolve_URI word_frags[0], ENV['TM_FILEPATH']  
  # Build model and query it  
  model = Turtle::Model.new(word_frags[0], iri)
  if (model.available?)
    choices = []    
    # TODO: Add caching layer for data used by UI.complete
    model.resources.sort! do |a,b|
      # First order by the resource type, then alphabetically by their name
      [ sort_dict[a.attributes['type']],
        a.attributes['id']
      ] &lt;=&gt; [
        sort_dict[b.attributes['type']],
        b.attributes['id']
      ]
    end.each do |rsc|      
      choices.push({
        'display' =&gt; rsc.attributes['id'].to_s + '      ',
        'match' =&gt; rsc.attributes['id'].to_s,
        'insert' =&gt; '',
        'image' =&gt; icons[rsc.attributes['type'].to_s]
      })      
    end
    
    TextMate::UI.complete(choices, :case_insensitive =&gt; false, :initial_filter =&gt; word_frags[1], :extra_chars=&gt;'_-.:\\')
    TextMate::exit_discard
  end
  done = true  
end

# Default behaviour -- don't replace anything but show it as tooltip instead
if Turtle::DEBUG and not done
  puts 'TM_SCOPE: '+ENV['TM_SCOPE']
  if not ENV['TM_SCOPE_LEFT'].nil?
    puts 'TM_SCOPE_LEFT: '+ENV['TM_SCOPE_LEFT']
  end
  TextMate::exit_show_tool_tip
end

  




</string>
	<key>input</key>
	<string>word</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>~</string>
	<key>name</key>
	<string>Autocomplete</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>atCaret</string>
	<key>scope</key>
	<string>source.turtle, source.sparql</string>
	<key>uuid</key>
	<string>5B3DDC52-4AF7-45E5-AC26-837BF81208FE</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
