<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18 -wKU

require ENV['TM_BUNDLE_SUPPORT']+'/lib/turtle'
require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'

scope = ENV['TM_SCOPE'] || ''
left_scope = ENV['TM_SCOPE_LEFT'] || ''

if left_scope.index('variable.other.PNAME_NS.turtle') or left_scope.index('support.variable.PN_LOCAL.turtle')
    word = Word::current_word('(\S*):(\S*)')
    # Chop of trailing dot (language grammar isn't that stable)
    word = word[0..-2] if word.end_with? '.'
    frags = word.split(':')
    # Try to determine the IRI associated with prefix in current document
    iri = Turtle.resolve_URI frags[0], ENV['TM_FILEPATH']
    if 2 == frags.length
      model = Turtle::Model.new(frags[0], iri)
      if model.available?
        docu = model.explain(frags[1])        
        TextMate::UI.simple_notification(
          :title   =&gt; "Documentation",
          :summary =&gt; (model.prefix+':'+frags[1]) + ((docu['label']) ? ' â€” "'+docu['label']+'"' : ''),
          :log     =&gt; docu['description'] || 'Sorry, no documentation available.'
        )
      end      
    end
end</string>
	<key>input</key>
	<string>line</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Documentation for Resource</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>scope</key>
	<string>source.turtle meta.spec.PNAME_LN.turtle, source.sparql meta.spec.PNAME_LN.turtle</string>
	<key>uuid</key>
	<string>533BE8C9-42EF-48EF-A1FC-5E831DC46059</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
